using System;
using System.Collections.Generic;
using UnityEngine;

public abstract class PathfindingAlgorithm : MonoBehaviour
{
    [Header("--- VIEW DEBUGGING VISUALIZATIONS ---")] [Space(10)]
    [SerializeField] 
    protected bool _showPostProcessingVisualizations = true;
    [HideInInspector] [SerializeField] 
    protected bool _previousShowPostProcessingVisualizations = true; ////🔒 HIDDEN - FOR CHECKING CHANGES ONLY
    [SerializeField]
    protected bool _showAlgorithmVisualizations = true;


    [Header("--- ADDITIONAL POSTPROCESSING ---")]
    [Tooltip("Applied in sequential order. Used for applying improvements and cleanup to raw node paths generated by a pathfinding algorithm")]
    [SerializeField] protected NodePathPostProcessor[] _postProcessors = Array.Empty<NodePathPostProcessor>();

    public delegate bool IsTileTraversable(Vector2Int tile);
    protected IsTileTraversable _isTileTraversable;

    public delegate Vector3 GetWorldPositionOfTile(Vector2Int tile);
    protected GetWorldPositionOfTile _getWorldPositionOfTile;

    protected bool _currentlyPathfinding = false;
    protected bool _abortRequested = false;
    protected float _startTime;

    ///------------------------------------------------------------------------------<summary>
    /// The publicly exposed method used to generate a path from a pathfinding algorithm.   </summary>
    public virtual PathNode[] GetPath(Vector2Int startingTileIndex, Vector2Int destinationTileIndex, Vector2Int tileCountXY, IsTileTraversable isTileTraversable, GetWorldPositionOfTile getWorldPositionOfTile, Vector3 collisionBoxSize)
    {
        //💬 Store delegates for use in future method calls
        _getWorldPositionOfTile = getWorldPositionOfTile; 
        _isTileTraversable = isTileTraversable;

        List<PathNode> calculatedNodePath = CalculatePathfinding(startingTileIndex, destinationTileIndex, tileCountXY, collisionBoxSize);

        //💬 Optional PostProcessing Steps: (performed in order)
        for (int i = 0; i < _postProcessors.Length; i++) {
            calculatedNodePath = _postProcessors[i].GetNewPath(calculatedNodePath, collisionBoxSize);
        }
        return calculatedNodePath.ToArray();
    }


    ///------------------------------------------------------------------------------<summary>
    /// The main method housing the implementation details of pathfinding. Returns
    /// a list of PathNodes. </summary>
    protected abstract List<PathNode> CalculatePathfinding(Vector2Int startingTileIndex, Vector2Int destinationTileIndex, Vector2Int tileCountXY, Vector3 collisionBoxSize);
    

    ///------------------------------------------------------------------------------<summary>
    /// Clears out any data generated by previous calls to GetPath()  </summary>
    protected abstract void ResetData(); //---------------------------------------------------



    ///------------------------------------------------------------------------------<summary>
    /// 🔭 Nothing here yet... ✨   (description coming soon)   </summary>
    public virtual void AbortAndReset() //--------------------------------------------------------------
    {
        if (_currentlyPathfinding)
            _abortRequested = true;

        Reset();
    }

    ///------------------------------------------------------------------------------<summary>
    /// 🔭 Nothing here yet... ✨   (description coming soon)   </summary>
    public virtual void Reset() //--------------------------------------------------------------------
    {
        ResetData();

        foreach (NodePathPostProcessor postProcessor in _postProcessors) {
            postProcessor.Reset();
        }
    }

    
    ///------------------------------------------------------------------------------<summary>
    /// 🔭 Nothing here yet... ✨   (description coming soon)   </summary>
    protected virtual void OnValidate()
    {
        if (_showPostProcessingVisualizations != _previousShowPostProcessingVisualizations) {
            _previousShowPostProcessingVisualizations = _showPostProcessingVisualizations;
            ShowDebuggingGizmosForPostProcessing(_showPostProcessingVisualizations);
        }
    }


    ///------------------------------------------------------------------------------<summary>
    /// Sets the visibility of the in-editor debugging visualiation gizmos for the
    /// algorithm and all of its postprocessing. </summary>
    public virtual void ShowDebuggingGizmos(bool newVisibility) //-------------------------------------
    {
        _showAlgorithmVisualizations = newVisibility;

        foreach (NodePathPostProcessor postProcessor in _postProcessors) {
            postProcessor.ShowDebuggingGizmos(newVisibility);
        }
    }


    ///------------------------------------------------------------------------------<summary>
    /// 🔭 Nothing here yet... ✨   (description coming soon)   </summary>
    protected virtual void ShowDebuggingGizmosForPostProcessing(bool newVisibility) //-------------------------------------
    {
        foreach (NodePathPostProcessor postProcessor in _postProcessors) {
            postProcessor.ShowDebuggingGizmos(newVisibility);
        }
    }
}
